/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.Employee;

import Business.Service.Service;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vamsimokari
 */
public class ClientServiceInfo extends javax.swing.JPanel {

    /**
     * Creates new form clientserviceDetailsJPanel
     */
    private String custId;
    private JPanel userProcessContainer;
    ClientServiceInfo(JPanel userProcessContainer, String custId) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.custId = custId;
        populateTables();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        RequiredTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        not_requiredTable = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        AwaitingTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        CompletedTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("client Service Details");
        
        RequiredTable.getTableHeader().setFont(new java.awt.Font("Arial", 1, 14));
        RequiredTable.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        RequiredTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Required"
            }
        ));
        jScrollPane1.setViewportView(RequiredTable);
        
        not_requiredTable.getTableHeader().setFont(new java.awt.Font("Arial", 1, 14));
        not_requiredTable.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        not_requiredTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Not Required"
            }
        ));
        jScrollPane2.setViewportView(not_requiredTable);
        
        AwaitingTable.getTableHeader().setFont(new java.awt.Font("Arial", 1, 14));
        AwaitingTable.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        AwaitingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Awaiting"
            }
        ));
        jScrollPane3.setViewportView(AwaitingTable);

        btnBack.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jScrollPane4.setViewportView(CompletedTable);
        
        CompletedTable.getTableHeader().setFont(new java.awt.Font("Arial", 1, 14));
        CompletedTable.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        CompletedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Completed"
            }
        ));
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    )
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(351, 351, 351)
                        .addComponent(jLabel1)))
                .addGap(204, 204, 204))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72)
                .addComponent(jLabel1)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(168, 168, 168))
        );
    }// </editor-fold>                        

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        ManageClients empwjp = (ManageClients) component;
        
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }                                       


    // Variables declaration - do not modify                     
    private javax.swing.JButton btnBack;
    private javax.swing.JTable RequiredTable;
    private javax.swing.JTable AwaitingTable;
    private javax.swing.JTable CompletedTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable not_requiredTable;
    // End of variables declaration                   

    private void populateTables() {
         DefaultTableModel model = (DefaultTableModel) not_requiredTable.getModel();
         DefaultTableModel model2 = (DefaultTableModel) RequiredTable.getModel();
         DefaultTableModel model3 = (DefaultTableModel) AwaitingTable.getModel();
         DefaultTableModel model4 = (DefaultTableModel) CompletedTable.getModel();
         model2.setRowCount(0);
         MongoClient mongoClient = new MongoClient("localhost", 27017); 
         DB db = mongoClient.getDB("ServiceCheckDB");
         DBCollection userCollection = db.getCollection("clients");
         DBCursor cursor = null;
         cursor = userCollection.find();
         model.setRowCount(0);
         while(cursor.hasNext()){
            DBObject obj = cursor.next();
            if(obj.get("_id").equals(custId)) {
                List<BasicDBObject> vl = (List<BasicDBObject>) obj.get("serviceInfo");
                for(BasicDBObject v : vl) {
                    Object[] row = new Object[model.getColumnCount()];
                    if(v.get("serviceStatus").equals("Not Required")) {
                        row[0] = v.get("serviceName");
                        model.addRow(row);
                    }
                }
                for(BasicDBObject v : vl) {
                    Object[] row = new Object[model2.getColumnCount()];
                    if(v.get("serviceStatus").equals("Required")) {
                        row[0] = v.get("serviceName");
                        model2.addRow(row);
                    }
                }
                for(BasicDBObject v : vl) {
                    Object[] row = new Object[model3.getColumnCount()];
                    if(v.get("serviceStatus").equals("Awaiting")) {
                        row[0] = v.get("serviceName");
                        model3.addRow(row);
                    }
                }
                for(BasicDBObject v : vl) {
                    Object[] row = new Object[model4.getColumnCount()];
                    if(v.get("serviceStatus").equals("Completed")) {
                        row[0] = v.get("serviceName");
                        model4.addRow(row);
                    }
                }
                break;
            }
         } 
    }
}
